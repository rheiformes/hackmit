"use client"

import { useState, useRef, useEffect } from "react"
import { Card, CardContent } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Slider } from "@/components/ui/slider"
import { Badge } from "@/components/ui/badge"
import { Play, Pause, Volume2, VolumeX, Download, Share2, RotateCcw } from "lucide-react"

interface AudioPlayerProps {
  title: string
  audioUrl?: string
  streamUrl?: string
  imageUrl?: string
  duration?: number
  tags?: string
  clipId: string
  isGenerating?: boolean
  onRegenerate?: () => void
}

export function AudioPlayer({
  title,
  audioUrl,
  streamUrl,
  imageUrl,
  duration,
  tags,
  clipId,
  isGenerating = false,
  onRegenerate,
}: AudioPlayerProps) {
  const audioRef = useRef<HTMLAudioElement>(null)
  const [isPlaying, setIsPlaying] = useState(false)
  const [currentTime, setCurrentTime] = useState(0)
  const [totalDuration, setTotalDuration] = useState(duration || 0)
  const [volume, setVolume] = useState(1)
  const [isMuted, setIsMuted] = useState(false)
  const [isLoading, setIsLoading] = useState(false)

  // Use stream URL first, then fall back to final audio URL
  const playbackUrl = streamUrl || audioUrl

  useEffect(() => {
    const audio = audioRef.current
    if (!audio) return

    const updateTime = () => setCurrentTime(audio.currentTime)
    const updateDuration = () => setTotalDuration(audio.duration)
    const handleLoadStart = () => setIsLoading(true)
    const handleCanPlay = () => setIsLoading(false)
    const handleEnded = () => setIsPlaying(false)

    audio.addEventListener("timeupdate", updateTime)
    audio.addEventListener("loadedmetadata", updateDuration)
    audio.addEventListener("loadstart", handleLoadStart)
    audio.addEventListener("canplay", handleCanPlay)
    audio.addEventListener("ended", handleEnded)

    return () => {
      audio.removeEventListener("timeupdate", updateTime)
      audio.removeEventListener("loadedmetadata", updateDuration)
      audio.removeEventListener("loadstart", handleLoadStart)
      audio.removeEventListener("canplay", handleCanPlay)
      audio.removeEventListener("ended", handleEnded)
    }
  }, [playbackUrl])

  const togglePlay = async () => {
    const audio = audioRef.current
    if (!audio || !playbackUrl) return

    try {
      if (isPlaying) {
        audio.pause()
        setIsPlaying(false)
      } else {
        await audio.play()
        setIsPlaying(true)
      }
    } catch (error) {
      console.error("Playback error:", error)
      setIsPlaying(false)
    }
  }

  const handleSeek = (value: number[]) => {
    const audio = audioRef.current
    if (!audio) return

    const newTime = value[0]
    audio.currentTime = newTime
    setCurrentTime(newTime)
  }

  const handleVolumeChange = (value: number[]) => {
    const audio = audioRef.current
    const newVolume = value[0]

    setVolume(newVolume)
    setIsMuted(newVolume === 0)

    if (audio) {
      audio.volume = newVolume
    }
  }

  const toggleMute = () => {
    const audio = audioRef.current
    if (!audio) return

    if (isMuted) {
      audio.volume = volume
      setIsMuted(false)
    } else {
      audio.volume = 0
      setIsMuted(true)
    }
  }

  const formatTime = (time: number) => {
    const minutes = Math.floor(time / 60)
    const seconds = Math.floor(time % 60)
    return `${minutes}:${seconds.toString().padStart(2, "0")}`
  }

  const handleDownload = () => {
    if (audioUrl) {
      const link = document.createElement("a")
      link.href = audioUrl
      link.download = `${title || "jam-track"}.mp3`
      document.body.appendChild(link)
      link.click()
      document.body.removeChild(link)
    }
  }

  const handleShare = async () => {
    if (navigator.share && audioUrl) {
      try {
        await navigator.share({
          title: title,
          text: `Check out this track generated by Jam!`,
          url: audioUrl,
        })
      } catch (error) {
        // Fallback to clipboard
        navigator.clipboard.writeText(audioUrl)
        alert("Audio URL copied to clipboard!")
      }
    } else if (audioUrl) {
      navigator.clipboard.writeText(audioUrl)
      alert("Audio URL copied to clipboard!")
    }
  }

  return (
    <Card className="w-full border-2 hover:border-primary/30 transition-all duration-300 shadow-sm hover:shadow-md">
      <CardContent className="p-6">
        {playbackUrl && <audio ref={audioRef} src={playbackUrl} preload="metadata" crossOrigin="anonymous" />}

        <div className="flex items-start gap-4">
          {/* Album Art */}
          <div className="w-20 h-20 bg-muted rounded-xl flex-shrink-0 overflow-hidden shadow-sm">
            {imageUrl ? (
              <img src={imageUrl || "/placeholder.svg"} alt={title} className="w-full h-full object-cover" />
            ) : (
              <div className="w-full h-full flex items-center justify-center bg-gradient-to-br from-primary/20 to-accent/20">
                <Play className="w-8 h-8 text-primary" />
              </div>
            )}
          </div>

          {/* Track Info */}
          <div className="flex-1 min-w-0">
            <h3 className="font-semibold text-lg truncate text-balance">{title}</h3>
            <p className="text-sm text-muted-foreground mb-2 font-mono">ID: {clipId}</p>

            {tags && (
              <div className="flex flex-wrap gap-1 mb-3">
                {tags.split(", ").map((tag) => (
                  <Badge key={tag} variant="secondary" className="text-xs bg-accent/20 text-accent-foreground">
                    {tag}
                  </Badge>
                ))}
              </div>
            )}

            {/* Controls */}
            <div className="space-y-3">
              {/* Play Controls */}
              <div className="flex items-center gap-3">
                <Button
                  onClick={togglePlay}
                  disabled={!playbackUrl || isLoading || isGenerating}
                  size="sm"
                  className="w-10 h-10 rounded-full p-0 shadow-sm hover:shadow-md transition-shadow"
                >
                  {isLoading || isGenerating ? (
                    <div className="w-4 h-4 border-2 border-primary-foreground border-t-transparent rounded-full animate-spin" />
                  ) : isPlaying ? (
                    <Pause className="w-4 h-4" />
                  ) : (
                    <Play className="w-4 h-4" />
                  )}
                </Button>

                <div className="text-xs text-muted-foreground font-mono">
                  {formatTime(currentTime)} / {formatTime(totalDuration)}
                </div>

                <div className="flex items-center gap-1 ml-auto">
                  {onRegenerate && (
                    <Button
                      onClick={onRegenerate}
                      variant="ghost"
                      size="sm"
                      disabled={isGenerating}
                      className="hover:bg-accent/10"
                    >
                      <RotateCcw className="w-4 h-4" />
                    </Button>
                  )}
                  <Button
                    onClick={handleShare}
                    variant="ghost"
                    size="sm"
                    disabled={!audioUrl}
                    className="hover:bg-accent/10"
                  >
                    <Share2 className="w-4 h-4" />
                  </Button>
                  <Button
                    onClick={handleDownload}
                    variant="ghost"
                    size="sm"
                    disabled={!audioUrl}
                    className="hover:bg-accent/10"
                  >
                    <Download className="w-4 h-4" />
                  </Button>
                </div>
              </div>

              {/* Progress Bar */}
              <div className="space-y-2">
                <Slider
                  value={[currentTime]}
                  max={totalDuration}
                  step={1}
                  onValueChange={handleSeek}
                  disabled={!playbackUrl || totalDuration === 0}
                  className="w-full"
                />
              </div>

              {/* Volume Control */}
              <div className="flex items-center gap-2">
                <Button onClick={toggleMute} variant="ghost" size="sm" className="p-1 hover:bg-accent/10">
                  {isMuted || volume === 0 ? <VolumeX className="w-4 h-4" /> : <Volume2 className="w-4 h-4" />}
                </Button>
                <Slider
                  value={[isMuted ? 0 : volume]}
                  max={1}
                  step={0.1}
                  onValueChange={handleVolumeChange}
                  className="w-20"
                />
              </div>
            </div>
          </div>
        </div>
      </CardContent>
    </Card>
  )
}
